#ifndef CalibAlig_h
#define CalibAlig_h
using namespace std;
double V_conector = 299.792*0.568;//0.6;// mm/ns  - check it


//double dT_align_factor[48] = {-2.1,-1.8,-1.8,-1.7,-1,-0.7,-1.3,-2.1,-1.1,-1.3,-1.2,-1.5,-0.9,-0.9,-0.9,-1.2,-2.3,-1.2,-1.8,-1.6,-0.6,-0.6,-1.7,-1.4,-0.7,-0.8,-0.5,-0.7,-0.4,-1.7,-1,-0.5,-0.7,-1.1,-0.5,1.77636e-15,-0.9,-1.1,1.77636e-15,-0.2,-0.6,1.77636e-15,-0.2,-0.1,-0.1,-0.3,-0.5,-0.5}; // FEB 18

double dT_align_factor[48] = {-2.1,-1.8,-1.8,-1.7,-1,-0.7,-1.3,-2.1,-1.1,-1.3,-1.2,-1.5,-0.9,-0.9,-0.9,-1.2,-2.3,-1.2,-1.8,-1.6,-0.6,-0.6,-1.7,-1.4,-0.7,-0.8,-0.5,-0.7,-0.4,-1.7,-1,-0.5,-0.7,-1.1,-0.5,1.77636e-15,-0.9,-1.1,1.77636e-15,-0.2,-0.6,1.77636e-15,-0.2,-0.1,-0.1,-0.3,-0.5,-0.5};
vector<int> Feb_Chamber(int sn_){

	vector<int> Feb_Chamber_vec;
	Feb_Chamber_vec.clear();

	// side =1,2 = G,R
	int side_ = 1;

        int feb_ = 0;
        int chamber_ = 0;
        if(sn_>=458&&sn_<=542) {feb_=7; chamber_=41;}
        if(sn_>=565&&sn_<=573) {feb_=9; chamber_=41;}
        if(sn_>=576&&sn_<=577) {feb_=1; chamber_=31;}
        if(sn_>=578&&sn_<=589) {feb_=2; chamber_=31;}
        if(sn_>=592&&sn_<=601) {feb_=2; chamber_=31;}
        if(sn_>=602&&sn_<=610) {feb_=1; chamber_=31;}
        if(sn_>=611&&sn_<=615) {feb_=9; chamber_=41;}
        if(sn_>=195&&sn_<=202) {feb_=1; chamber_=41;}
        if(sn_>=617&&sn_<=623) {feb_=7; chamber_=41;}
        if(sn_>=210&&sn_<=220) {feb_=2; chamber_=41;}
        if(sn_>=224&&sn_<=231) {feb_=6; chamber_=31;}
        if((sn_>=224&&sn_<=231) || (sn_==21||sn_==22 || sn_==252 || sn_==253)) {feb_=6; chamber_=31;}
	if(sn_==261) {feb_=6; chamber_=31;}
        if(sn_==274||sn_==277) {feb_=10; chamber_=31;}
	if(sn_==289||sn_==285||sn_==291)  {feb_=5; chamber_=31;}
        if(sn_==644||sn_==681||sn_==682||sn_==691||sn_==695||sn_==697||sn_==3118712||sn_==311871205)  {feb_=12; chamber_=31; side_=2;}
	if(sn_==650||sn_==651||sn_==655||sn_==657||sn_==654||sn_==658||sn_==656||sn_==660||sn_==661||sn_==667||sn_==668||sn_==669||sn_==671||sn_==704) {feb_=11; chamber_=31;}
        if(sn_==293||sn_==296||sn_==297||sn_==298||sn_==299)  {feb_=14; chamber_=31;}
        if(sn_==294||sn_==295|sn_==311)  {feb_=17; chamber_=31;} 
	if(sn_==714||sn_==718||sn_==711||sn_==736||sn_==737||sn_==738)  {feb_=18; chamber_=31;}
	if(sn_>755&&sn_<782)  {feb_=18; chamber_=41;  side_=2;}
        if(sn_==357)  {feb_=18; chamber_=31;}
	if(sn_>798&&sn_<815) {feb_=18; chamber_=31;}
        if(sn_>815) {feb_=18; chamber_=41;}
        if(sn_==703||sn_==704||sn_==705||sn_==3118711||sn_==311871105) {feb_=11; chamber_=31; side_=1;}
	if(sn_>847) {feb_=18; chamber_=41; side_=2;}
        if(sn_>937) {feb_=18; chamber_=41; side_=2;}
        if(sn_>1030) {feb_=13; chamber_=31; side_=1;}
        if(sn_==382 || sn_==384) {feb_=18; chamber_=41; side_=2;}//feb19
	if(sn_==388) {feb_=18; chamber_=31; side_=2;}//feb19
    if(sn_>=1217) {feb_=18; chamber_=41; side_=2;}

// ADD HERE NEW SACN_ID AND IT FEB AND CHAMBER NUMBERS
// EXAMPLE:
// if(sn_==XX) {feb_==YY; chamber_=ZZ;}
//



	if(feb_==0 || chamber_==0) {feb_=7; chamber_=31;}


	Feb_Chamber_vec.push_back(feb_);
	Feb_Chamber_vec.push_back(chamber_);
	Feb_Chamber_vec.push_back(side_);
	return Feb_Chamber_vec;
}




vector<vector<double> > time_corr_fine_func(int sn_){ 

        vector<int> Feb_Chamber_vec = Feb_Chamber(sn_);

	int feb_ = Feb_Chamber_vec.at(0);

        double time_corr_fine_7[3][32] = {
                {12.693,11.6978,13.6978,17.6978,12.6978,16.6946,12.6978,15.6063,14.6978,13.68,14.6978,16.6978,21.6978,14.6978,16.6978,19.6978,15.6978,20.6978,19.6978,15.6966,19.7382,16.6977,16.8368,15.6978,16.6978,15.0174,21.2743,19.6978,12.6978,14.6415,15.6978,12.6978},
                {12.6978,11.6984,13.6978,18.6976,12.8031,16.6978,12.6978,15.6978,14.6978,13.6978,14.6978,16.6978,21.6978,15.6974,16.6978,19.6978,15.698,20.6978,20.6978,15.6978,20.6978,16.6978,17.6978,15.6978,17.5152,15.6978,21.6978,19.6978,12.6978,13.8225,15.6978,12.6978},
                {12.6978,11.6978,13.6978,17.6978,12.6978,16.6971,12.6978,14.7291,14.6978,13.6974,14.6978,16.6978,21.6978,14.6978,16.6978,19.6978,15.6978,20.6978,19.6978,14.6978,19.6978,16.6964,16.6978,15.6978,16.6978,14.6978,20.6978,19.6978,12.2849,13.6978,15.6978,12.6978}
        };
        double time_corr_fine_9[3][32] = {
                {12.5838,12.5838,13.5838,18.5838,13.5837,16.6023,12.602,15.6023,14.602,13.6023,15.602,16.6023,21.6027,15.5838,16.5839,19.5838,16.581,21.5812,20.581,15.5812,20.5838,16.5838,17.5838,16.1256,17.5838,15.5838,21.5838,20.5568,12.5838,14.5838,16.4877,12.7723},
                {12.5838,12.4118,13.5838,18.5838,13.5837,16.5838,12.5838,15.5838,14.5838,13.5838,14.5839,16.5838,21.5838,14.94,16.5838,19.5838,15.5838,20.5838,19.5838,14.805,19.5838,16.5838,17.5838,15.5838,16.5838,14.5838,21.5838,19.5838,12.5838,13.9309,15.5838,12.5838},
                {12.3392,11.5838,13.5838,17.5838,12.5838,16.5012,12.5838,14.9183,14.5838,13.5838,14.5838,16.5838,21.5838,14.5838,16.5838,18.5838,15.5838,20.5838,20.0628,15.5838,19.5838,16.5838,17.5631,15.5838,16.5838,14.925,20.5839,19.5838,12.5838,13.5848,15.5838,12.5838}
        };
        double time_corr_fine_1[3][32] = {
                {12.5625,12.5625,13.5609,18.5609,13.5592,16.5592,12.5621,15.5622,14.5592,13.5592,15.5384,16.5592,21.5592,15.5592,16.5656,19.5617,16.5653,20.5582,20.5924,15.5701,20.5952,16.5721,17.567,15.5655,17.5594,15.5589,21.5639,19.564,12.5617,14.5618,15.598,12.5632},
                {12.5592,11.5598,13.5592,18.5592,13.5053,16.5592,12.5592,15.5592,14.5641,13.5592,14.571,16.5641,21.571,14.5712,16.5645,19.5647,15.5625,20.5625,20.5625,15.5625,20.5625,16.5592,17.5592,15.5634,17.5592,14.6062,21.5639,19.564,12.5686,14.5477,15.5673,12.5668},
                {12.5633,12.5648,13.5697,18.5647,12.752,16.5642,12.5691,15.5692,14.5691,13.5642,15.563,16.5642,21.5592,15.5591,16.5592,19.5592,15.8607,20.5592,20.5592,15.5592,20.439,16.5578,17.5592,15.5592,17.3047,15.5592,21.5592,19.5592,12.5565,14.5575,15.5573,12.5574}
        };
        double time_corr_fine_2[3][32] = {
                {12.3728,12.3728,13.3728,18.3772,13.3783,16.3728,12.3728,15.3728,14.3728,13.3728,15.3727,16.3728,21.3728,15.3728,16.3728,20.3728,16.3583,20.3728,20.3728,15.3728,20.3492,16.3728,17.3728,15.3728,17.3728,15.3728,21.3728,19.3728,12.3728,14.3728,16.376,13.3728},
                {12.3736,12.3558,13.3728,18.3728,13.3579,16.3728,12.3875,15.3778,14.3808,13.375,15.3728,16.3728,21.3793,15.3792,16.3728,19.3728,15.3729,20.3729,19.3729,15.3692,20.3729,16.3729,17.378,15.3781,17.3747,15.3412,21.3748,19.3729,12.3743,14.3744,15.3729,13.3585},
                {12.7361,12.3728,14.3727,18.3728,13.3728,16.7191,13.3728,15.3702,15.3751,14.0005,15.3797,17.3656,22.3797,15.3798,17.371,20.3728,16.3729,21.3729,20.3729,16.3729,20.3708,17.3725,18.1596,16.3729,17.3729,15.3729,22.1742,20.3729,13.3555,14.377,16.3729,13.3729}
        };
        double time_corr_fine_9_2[3][32] = {
                {11.7402,11.7402,12.7402,17.7402,12.7393,15.7402,11.7402,14.7402,13.7402,12.7402,14.7402,15.7402,20.7608,14.7402,15.7402,18.2543,15.7402,20.7335,19.7402,14.7402,19.7402,15.7402,16.7402,15.0383,16.7402,14.7402,20.7402,19.4417,11.7402,13.7402,15.426,11.7446},
                {11.7107,10.7402,12.7402,16.9579,14.7402,15.7402,11.7402,14.4675,13.7402,12.7402,13.7402,15.7402,20.7402,16.7402,15.7402,17.7445,14.7402,19.7402,18.7402,16.7402,18.7402,15.7402,16.2941,14.7402,15.7402,13.7402,20.7401,18.7402,11.7402,12.7428,14.7402,11.7402},
                {11.4446,10.7402,12.7402,16.7402,11.7402,15.7161,11.7402,14.5476,13.7402,12.7402,13.7402,15.7402,20.7402,13.7402,15.7402,17.7409,14.7402,19.7402,19.3875,14.7387,18.7402,15.7402,16.669,14.7402,15.7402,13.8002,19.7402,18.7402,11.7402,12.7402,14.7402,11.7402}
        };
        double time_corr_fine_6[3][32] = {
                {15.3147,13.3131,13.2824,15.2839,14.2824,15.3131,12.3131,15.3131,11.3131,14.3131,15.3131,16.3131,19.074,15.3131,17.3131,19.3131,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19,-1148.19},
                {15.3131,13.3131,13.3131,16.2528,14.3131,15.3131,12.3131,15.3131,11.3131,14.3131,15.3131,16.3131,19.3131,15.3131,18.3127,19.3131,17.3129,18.3131,18.3131,15.3131,18.3131,17.4229,17.303,16.3131,17.3131,17.3131,21.3131,19.3131,17.3131,16.3131,15.3131,15.3131},
                {15.3131,13.3131,13.3131,15.3131,14.3131,15.3131,12.3131,15.3131,11.3838,14.3131,15.3131,16.3131,18.3131,15.3131,16.324,19.0838,16.3131,18.3131,18.3131,15.3131,17.3132,17.3131,16.3131,16.3131,17.3105,17.3131,20.3089,18.3093,17.3089,15.3092,14.9573,15.3093}
        };
        double time_corr_fine_6_2[3][32] = {
                {19.9038,11.9038,9.9038,11.9038,10.9004,10.9038,8.9038,9.01181,9.9038,9.90428,13.9037,12.9038,16.9038,11.9038,12.9038,14.3017,16.9038,16.9038,13.9038,11.9038,15.9038,15.9038,14.2609,15.9025,14.9038,13.9041,17.7356,14.9038,12.9038,13.9038,13.4401,12.9038},
                {9.9038,11.9038,9.9038,11.9076,10.9038,11.9038,8.9038,9.90365,9.9038,10.9038,13.9038,12.9038,17.9038,11.9038,13.9038,14.9038,15.9038,15.9038,13.9033,11.9038,15.9038,14.9038,13.9038,14.9038,13.9039,13.9038,16.9038,13.9038,11.9038,12.9038,11.9038,11.9038},
                {9.9038,10.9038,9.9038,11.9038,10.3482,10.9039,8.9038,8.9038,9.90233,9.9038,12.9059,12.9038,16.9038,11.9038,12.9038,14.5518,15.9038,15.9038,12.9038,11.9038,14.9038,14.9038,13.9036,14.9038,13.9038,13.9038,15.9038,13.9038,11.9038,12.9038,11.9038,11.1062}
        };
        double time_corr_fine_6_3[3][32] = {
                {9.9038,11.9038,9.9038,11.9038,10.9004,10.9038,8.9038,9.01181,9.9038,9.90428,13.9037,12.9038,16.9038,11.9038,12.9038,14.3017,16.9038,16.9038,13.9038,11.9038,15.9038,15.9038,14.2609,15.9025,14.9038,13.9041,17.7356,14.9038,12.9038,13.9038,13.4401,12.9038},
                {9.9038,11.9038,9.9038,11.9076,10.9038,11.9038,8.9038,9.90365,9.9038,10.9038,13.9038,12.9038,17.9038,11.9038,13.9038,14.9038,15.9038,15.9038,13.9033,11.9038,15.9038,14.9038,13.9038,14.9038,13.9039,13.9038,16.9038,13.9038,11.9038,12.9038,11.9038,11.9038},
                {9.9038,10.9038,9.9038,11.9038,10.3482,10.9039,8.9038,8.9038,9.90233,9.9038,12.9059,12.9038,16.9038,11.9038,12.9038,14.5518,15.9038,15.9038,12.9038,11.9038,14.9038,14.9038,13.9036,14.9038,13.9038,13.9038,15.9038,13.9038,11.9038,12.9038,11.9038,11.1062}
        };
        double time_corr_fine_10[3][32] = {
		{11.2978,9.43231,11.2978,13.2978,11.2817,14.2978,10.2978,10.2978,9.29777,11.2978,11.2978,12.2978,15.2978,-648.202,13.2978,15.2663,13.2978,15.2978,15.2978,11.2978,15.2978,15.1169,11.2978,13.2978,12.2978,11.2978,16.2978,15.2978,9.29777,10.2978,13.2978,12.2978},
		{11.2978,9.3035,11.2978,13.2978,11.2978,14.2978,10.2978,10.2978,9.29777,11.2978,11.2978,12.2978,15.2978,11.2978,13.2978,15.2978,13.2978,15.2978,15.2978,11.2978,15.2978,14.3127,11.2978,13.2978,12.2978,11.2978,16.2978,15.2978,9.29777,10.2978,13.2978,12.2978},
		{12.2978,10.2978,11.2978,13.2978,11.2978,14.2978,10.2978,11.2978,9.29778,11.2978,11.3036,12.2978,15.2978,12.2976,13.2978,15.2978,14.2961,16.2902,15.2978,11.2978,15.7672,15.2975,11.2978,13.2978,12.2978,11.3082,16.2978,15.2978,9.29777,10.2978,13.2978,12.2978}
        };
        double time_corr_fine_11[3][32] = {
                {12.0147,10.1052,11.103,13.103,11.103,14.103,10.1094,11.0926,9.10945,11.1094,11.4666,12.1095,15.103,11.103,12.103,14.103,13.103,15.103,15.103,11.107,15.1073,15.0949,11.1031,13.103,12.103,11.1102,16.103,15.103,9.10298,10.103,12.0998,12.0998},
		{12.103,10.103,11.7071,14.103,11.103,14.103,11.1028,11.103,10.103,12.103,12.103,12.103,15.103,12.103,13.103,14.9874,14.103,16.103,15.103,12.103,16.103,15.103,12.103,14.103,12.1031,12.103,16.103,15.108,9.10298,10.103,13.103,12.103},
		{12.1111,10.1111,11.103,13.103,11.103,14.1175,10.2495,11.103,10.103,12.1026,12.103,12.103,15.103,12.1028,13.103,14.8407,14.103,16.103,15.103,12.0604,16.0975,15.103,12.1005,13.1092,12.103,12.103,16.103,15.1253,9.10298,10.103,13.103,12.103}
	};
        double time_corr_fine_12[3][32] = {
		{12.6802,11.6802,12.6802,14.6802,12.5546,15.6802,11.6802,10.6802,10.7133,12.6802,13.6802,14.6641,16.6802,13.6802,14.6802,15.6802,15.6802,17.6802,19.7553,14.6802,17.7463,15.6802,13.6802,14.6802,14.6802,15.6802,19.6802,17.6802,14.6802,12.6907,13.6802,16.6802},
		{12.6802,11.6802,12.6802,14.6802,12.6802,15.6802,11.6802,10.6802,10.7091,12.6802,13.6802,14.6802,16.6802,13.6802,14.6802,15.6899,15.6802,17.6802,20.6801,14.6802,18.6801,15.6802,13.6802,14.6802,14.6802,15.6802,19.6802,17.6802,14.6802,13.6802,13.6802,16.6802},
		{12.6802,11.6802,12.6802,14.6804,12.6802,15.6802,11.6802,10.6802,11.6802,12.7145,14.1348,14.6802,17.1224,13.6802,14.6802,15.6802,15.6803,17.6802,19.6804,14.6802,18.6255,15.6802,13.6802,14.6802,14.6802,15.6802,19.6802,17.6802,14.6802,13.6802,13.6802,16.6802}
	};
        double time_corr_fine_13[3][32] = {
		{/*-624.749*/11.6,11.7509,12.7509,14.7509,12.7509,15.7509,11.7509,10.7509,11.7289,12.7509,13.7509,14.7403,16.7509,13.7509,14.7509,15.7509,-624.749,17.7509,19.7542,14.7509,17.92,15.7509,13.7509,14.7509,14.7509,15.7509,19.7509,17.7509,14.7493,13.7508,13.7509,16.7509},
		{/*-624.749*/11.6,11.7509,12.7509,14.7549,11.7722,14.7509,11.7509,10.7509,10.7509,12.7509,13.7509,13.7509,16.7509,12.7829,14.7509,15.7509,-624.749,17.7509,19.7509,14.7506,17.7509,15.7509,13.7509,14.4719,14.7509,15.1968,19.7509,17.7509,14.7551,12.7509,13.7509,16.7509},
		{/*-624.749*/11.6,11.7509,12.7509,14.7509,12.7509,15.7509,11.7509,10.7509,11.5656,12.7509,13.7509,14.7509,16.7555,13.7509,14.7509,15.7509,-624.749,17.7509,19.7509,14.7509,17.8546,15.7509,13.7509,14.7509,14.7509,15.7509,19.7509,17.7509,14.7509,13.7185,13.7509,16.7509}
        };
        double time_corr_fine_14[3][32] = {
		{/*-649.623*/11.6,11.8773,12.8773,14.8773,12.2612,15.8014,11.8773,10.8773,10.8803,12.8773,13.8773,13.8773,16.8773,13.8773,14.8773,15.8773,-649.623,17.8773,19.8773,14.8773,17.8773,15.8773,13.8773,14.3728,14.8773,15.8773,19.8773,17.8773,13.879,13.8755,13.8773,16.6869},
		{/*-649.623*/11.6,11.8773,12.8773,14.8773,12.8773,15.8773,11.8773,10.8773,11.8773,12.8773,13.8773,14.8773,16.8774,13.8773,14.8773,15.8773,-649.623,17.8773,20.6365,14.8773,18.3101,15.8773,13.8773,14.8773,14.8773,15.8773,19.8773,17.8773,14.8773,13.8773,13.8773,16.8773},
		{/*-649.623*/11.6,11.8773,12.8191,14.8773,11.8773,14.8773,11.8773,10.8773,10.8773,12.8773,13.8773,13.8773,16.8773,12.8773,13.8831,15.8773,-649.623,17.8425,19.8773,14.397,17.8773,14.9371,12.9582,13.8773,13.8863,14.8773,18.8773,17.5521,13.8773,12.8773,12.8784,15.8773}
        };
        double time_corr_fine_15[3][32] = {
		{12.7037,11.7037,12.7037,14.7037,12.7037,15.7037,11.7037,10.7008,11.7037,12.7037,13.7037,14.7037,16.7038,13.7037,14.7037,15.7037,15.7037,17.7037,20.6872,14.7037,18.6718,15.7037,13.7037,14.7037,14.7008,15.7037,19.7037,17.7037,14.7037,13.7037,13.7037,16.7037},
		{12.7037,11.7037,12.7037,14.7037,12.7037,15.7037,11.7037,10.7037,11.7036,12.7037,13.7037,13.7097,16.7037,13.7037,14.7037,15.7037,15.7037,17.7037,19.7037,14.7037,17.7037,15.7037,13.7037,14.7037,14.7037,15.7037,19.7037,17.7037,14.5495,12.7852,13.7037,16.2072},
		{12.7037,11.7037,12.7037,15.0598,12.7037,15.7037,11.7037,10.7037,11.7037,12.7039,13.7232,14.7037,17.0289,13.7037,14.7037,15.7111,15.7037,17.7037,20.7037,14.7037,18.7037,15.7037,13.7037,14.7037,14.7037,15.7037,19.7037,17.7037,14.7037,13.7037,13.7037,16.7037}
	};

	double  time_corr_fine_16[3][32] = {
		{12.9734,11.9734,12.9734,14.9734,12.9734,15.9734,11.9734,10.9734,11.9734,12.9734,13.9734,14.9734,16.9734,13.9734,14.9734,15.9734,15.9734,17.9734,20.9733,14.9734,18.9734,15.9734,13.9734,14.9734,14.9734,15.9734,19.9734,17.9734,14.9734,13.9734,13.9734,16.9734},
		{12.9734,11.9734,12.9734,14.9734,11.9735,15.0034,11.9734,10.9734,11.1502,12.9734,13.9734,14.3759,16.9734,13.9734,14.9769,15.9734,15.9734,17.4941,19.9734,14.9562,17.9734,15.9734,13.6528,14.376,14.3792,15.2568,19.6236,17.9734,13.9734,12.9734,13.9734,15.9734},
		{12.9734,11.9734,12.9734,14.9734,11.9734,14.9754,11.9734,10.9734,10.9734,12.9734,13.9734,13.9734,16.9734,13.1766,14.9734,15.9734,15.9734,17.968,19.9734,14.9734,17.9734,15.9734,13.3384,14.7247,14.2018,15.8798,19.9734,17.9734,13.9734,12.9734,13.9734,16.3132}
	};

        double  time_corr_fine_17[3][32] = {
                {12.,11.9449,12.9438,14.9438,12.9517,15.9438,11.9438,10.9438,11.9429,12.9438,13.9438,14.7864,16.9438,13.9438,14.9567,15.9567,19.,19.4262,19.9438,14.9438,18.0021,15.9438,13.9397,14.9438,14.9437,15.9438,19.9438,17.9519,14.817,13.8446,13.9438,16.9436},
                {12.,12.0753,12.9438,14.9438,11.9438,15.4891,11.9438,10.9438,10.9438,12.9438,13.9438,14.9285,16.9438,13.9438,14.9438,15.9438,18.,17.9631,19.9438,14.9438,17.9438,15.9438,12.9438,14.8948,14.2326,14.9387,19.9438,17.9438,13.9438,12.9438,13.9438,16.0198},
                {12.,12.,12.9438,14.9438,11.9705,15.9438,11.9438,10.9438,11.3004,12.9438,13.9438,14.0256,16.9438,13.894,14.9438,15.957,19.,19.,19.9438,14.2395,17.9438,15.9437,13.1296,14.9425,14.3038,14.9827,19.9164,17.9438,13.9522,12.9438,13.9438,15.9439}
/*                {58.2027,11.9449,12.9438,14.9438,12.9517,15.9438,11.9438,10.9438,11.9429,12.9438,13.9438,14.7864,16.9438,13.9438,14.9567,15.9567,63.5406,19.4262,19.9438,14.9438,18.0021,15.9438,13.9397,14.9438,14.9437,15.9438,19.9438,17.9519,14.817,13.8446,13.9438,16.9436},
                {51.2011,12.0753,12.9438,14.9438,11.9438,15.4891,11.9438,10.9438,10.9438,12.9438,13.9438,14.9285,16.9438,13.9438,14.9438,15.9438,63.3532,17.9631,19.9438,14.9438,17.9438,15.9438,12.9438,14.8948,14.2326,14.9387,19.9438,17.9438,13.9438,12.9438,13.9438,16.0198},
                {60.4373,22.9782,12.9438,14.9438,11.9705,15.9438,11.9438,10.9438,11.3004,12.9438,13.9438,14.0256,16.9438,13.894,14.9438,15.957,63.1069,36.9496,19.9438,14.2395,17.9438,15.9437,13.1296,14.9425,14.3038,14.9827,19.9164,17.9438,13.9522,12.9438,13.9438,15.9439}
*/        };

// ADD HERE THE TIME CALIBRATION VALUES IF YOU NEW SACN_ID DO NOT HAVE IT YET.



        double time_corr_fine[3][32];

        if(feb_==7) memcpy(time_corr_fine, time_corr_fine_7, sizeof(time_corr_fine));
        if(feb_==9 && sn_<600) memcpy(time_corr_fine, time_corr_fine_9, sizeof(time_corr_fine));
        if(feb_==1) memcpy(time_corr_fine, time_corr_fine_1, sizeof(time_corr_fine));
        if(feb_==2) memcpy(time_corr_fine, time_corr_fine_2, sizeof(time_corr_fine));
        if(feb_==9 && sn_>600) memcpy(time_corr_fine, time_corr_fine_9_2, sizeof(time_corr_fine));
        if(feb_==6 && sn_>200 && sn_<232) memcpy(time_corr_fine, time_corr_fine_6, sizeof(time_corr_fine));
        if(feb_==6 && sn_<200 && sn_>180) memcpy(time_corr_fine, time_corr_fine_6_2, sizeof(time_corr_fine));
        if(feb_==6 && (sn_==252 || sn_==253)) memcpy(time_corr_fine, time_corr_fine_6_3, sizeof(time_corr_fine));
	if(sn_==261) memcpy(time_corr_fine, time_corr_fine_6_2, sizeof(time_corr_fine));
	if(feb_==10) memcpy(time_corr_fine, time_corr_fine_10, sizeof(time_corr_fine));
        if(feb_==5) memcpy(time_corr_fine, time_corr_fine_11, sizeof(time_corr_fine));
        if(feb_==11) memcpy(time_corr_fine, time_corr_fine_12, sizeof(time_corr_fine));
        if(feb_==12) memcpy(time_corr_fine, time_corr_fine_13, sizeof(time_corr_fine));
        if(feb_==14) memcpy(time_corr_fine, time_corr_fine_14, sizeof(time_corr_fine));
        if(feb_==17) memcpy(time_corr_fine, time_corr_fine_15, sizeof(time_corr_fine));
        if(feb_==18) memcpy(time_corr_fine, time_corr_fine_16, sizeof(time_corr_fine));
        if(feb_==13) memcpy(time_corr_fine, time_corr_fine_17, sizeof(time_corr_fine));
// ASSOCIATE HERE THE TIME CALIBRATION VECTOR WITH SCAN_ID/FEB NUMBERS



	vector<vector<double> > time_corr_fine_vec;
	time_corr_fine_vec.clear();
	vector<double> temp;
	temp.clear();
	for(int i=0; i<(sizeof(time_corr_fine[0])/sizeof(time_corr_fine[0][0]));i++){
		temp.push_back(time_corr_fine[0][i]);
	}
	time_corr_fine_vec.push_back(temp);
	temp.clear();
        for(int i=0; i<(sizeof(time_corr_fine[0])/sizeof(time_corr_fine[0][0]));i++){
                temp.push_back(time_corr_fine[1][i]);
        }
        time_corr_fine_vec.push_back(temp);
        temp.clear();
        for(int i=0; i<(sizeof(time_corr_fine[0])/sizeof(time_corr_fine[0][0]));i++){
                temp.push_back(time_corr_fine[2][i]);
        }


        time_corr_fine_vec.push_back(temp);

	return time_corr_fine_vec;

}


vector<double> Aligment_factor(int sn_, int dist){
// dist =1,2,3 = HR_to_conector,LR_to_conector,Strip_length
// side =1,2 = G,R

        vector<int> Feb_Chamber_vec = Feb_Chamber(sn_);
        int chamber = Feb_Chamber_vec.at(1);
        int side = Feb_Chamber_vec.at(2);

        vector<double> HR_to_conector_RE31_G{89.54,79.41, 69.29,59.17, 49.07,39.9, 35.71,31.52, 31.17,35.36,39.55,48.2, 58.32,68.43,78.55,88.66, 56.09,66.2,76.32,86.43, 96.55,106.67,116.78,126.9, 137.01,147.12,157.24,167.36, 177.47,187.59,197.7, 207.82, 175.12,185.38,195.48,205.6, 215.85,225.83,235.95,246.07, 256.18,266.3,276.67,286.53, 301.56,314.65,328.49,342.22}; 
        vector<double> LR_to_conector_RE31_G{2314.41,2304.93,2295.47,2286.0, 2276.53,2267.07,2257.61,2248.13, 2238.67,2229.2,2219.73,2210.27, 2200.79,2191.33,2181.88,2172.39, 2120.25,2110.78,2101.32,2091.85,2082.38,2072.92,2063.44,2053.98, 2044.52,2035.05,2025.58,2016.12,2006.65,1997.18,1987.72,1978.24, 1926.1,1916.63,1907.16,1897.7, 1888.23,1878.77,1869.3,1855.76, 1844.2,1832.12,1819.98,1807.77,1795.51,1783.16,1770.75,1757.01};
        vector<double> Strip_length_RE31_G{1468.0, 1468.02,1468.06, 1468.12,1468.2, 1468.3,1468.41,1468.55,1467.71,1468.89,1469.09,1469.31,1469.54,1469.8,1470.08,1470.38,1470.69,1471.03,1471.39,1471.76,1472.16,1472.57,1473.01,1473.46,1473.94,1474.43,1474.94,1475.48,1476.03,1476.6,1477.19,1477.81, 1477.13,1479.09,1479.76,1480.44,1480.16,1481.88,1482.63,1481.65,1477.53,1472.48,1466.4,1462.27,1452.54,1436.8,1420.18,1403.59};
        vector<double> HR_to_conector_RE31_R{90.78, 80.67, 70.55, 60.44, 50.32, 40.43, 36.24, 32.05, 30.64, 34.83, 39.02, 46.92, 57.04, 67.15, 77.27, 87.38, 54.82, 64.93, 75.05, 85.16, 95.28, 105.4, 115.51,125.63, 135.74,145.86,155.97,166.09,176.2, 186.32,196.44,206.55,173.99,184.11,194.22,204.33,214.58,224.56,234.68,244.8, 254.91,265.03,275.4,285.26, 300.29,313.38,327.22,340.95};
        vector<double> LR_to_conector_RE31_R{2313.13,2303.66,2294.2,2284.73,2275.26,2265.8,2256.33,2246.86,2237.4,2227.93,2218.46,2209.0,2199.53,2190.06,2180.6,2171.12,2118.98,2109.51,2100.05,2090.58,2081.11,2071.65,2062.18,  2052.71,2043.25,2033.78,2024.31,2014.85,2005.38,1995.91,1986.45,1976.98,1924.83,1915.37,1905.9,1896.43,1886.96,1877.5,1868.03,1854.49,1842.93,1830.86,1818.71,1806.51,1794.23,1781.9,1769.49,1755.74};
        vector<double> Strip_length_RE31_R{1468.0, 1468.02,1468.06,1468.12,1468.2,1468.3,1468.41,1468.55,1467.71,1468.89,1469.09,1469.31,1469.54,1469.8,1470.08,1470.38,1470.69,1471.03,1471.39,1471.76,1472.16,1472.57,1473.01,1473.46,1473.94,1474.43,1474.94,1475.48,1476.03,1476.6,1477.19,1477.81, 1477.13,1479.09,1479.76,1480.44,1480.16,1481.88,1482.63,1481.65,1477.53,1472.48,1466.4,1462.27,1452.54,1436.8,1420.18,1403.59};



        vector<double> HR_to_conector_RE41_G{89.51,79.4,69.28,59.17,49.05,39.9,35.71,31.52,31.17,35.36,39.55,48.19,58.3,68.42,78.54,88.65,56.09,66.2,76.32,86.43,96.55,106.66,116.78,126.89,137.01,147.13,157.23,167.36,177.47,187.59,197.87,207.82,175.25,185.37,195.48,205.6,215.71,225.83,235.95,246.06,256.18,266.29,276.41,286.52,301.52,314.55,328.53,342.07};
        vector<double> LR_to_conector_RE41_G{2106.88,2096.5,2086.12,2075.74,2065.36,2054.98,2044.6,2034.22,2023.84,2013.47,2003.09,1992.7,1982.33,1971.95,1961.57,1951.19,1898.13,1887.75,1877.37,1866.99,1856.62,1846.23,1835.85,1825.47,1815.09,1804.71,1794.33,1783.95,1773.57,1763.19,1752.82,1742.44,1689.38,1678.99,1668.62,1658.24,1647.86,1637.48,1627.1,1616.72,1602.64,1589.9,1576.42,1562.87,1549.23,1535.53,1521.75,1506.61};
        vector<double> Strip_length_RE41_G{1227.42,1227.12,1220.05,1220.1,1220.16,1220.24,1220.12,1220.04,1220.83,1220.74,1220.9,1220.38,1220.45,1221.86,1221.17,1221.77,1221.77,1222.52,1222.81,1223.12,1223.45,1223.8,1224.16,1224.54,1224.93,1225.34,1225.77,1226.21,1225.54,1227.91,1226.42,1228.96,1228.96,1229.21,1229.76,1230.34,1230.92,1231.53,1232.15,1232.78,1234.47,1225.26,1220.83,1214.69,1203.98,1187.26,1179.13,1151.98};
        vector<double> HR_to_conector_RE41_R{90.89,80.67,70.55,60.44,50.32,40.43,36.24,32.05,30.64,34.83,39.02,46.92,57.03,67.15,77.27,87.38,54.82,64.93,75.05,85.16,95.28,105.39,115.51,125.62,135.74,145.86,155.97,166.09,176.2,186.32,196.6,206.55,173.98,184.1,194.21,204.33,214.44,224.56,234.68,244.79,254.91,265.02,275.14,285.25,300.25,313.27,327.26,340.79};
        vector<double> LR_to_conector_RE41_R{2105.61,2095.23,2084.85,2074.47,2064.09,2053.71,2043.33,2032.95,2022.57,2012.2,2001.82,1991.44,1981.06,1970.68,1960.3,1949.92,1896.86,1886.48,1876.1,1865.72,1855.34,1844.96,1834.58,1824.2,1813.82,1803.44,1793.06,1782.68,1772.3,1761.92,1751.54,1741.17,1688.11,1677.73,1667.35,1656.97,1646.59,1636.21,1625.83,1615.45,1601.37,1588.63,1575.15,1561.6,1547.96,1534.26,1520.48,1505.34};
        vector<double> Strip_length_RE41_R{1227.42,1227.12,1220.05,1220.1,1220.16,1220.24,1220.12,1220.04,1220.83,1220.74,1220.9,1220.38,1220.45,1221.86,1221.17,1221.77,1221.77,1222.52,1222.81,1223.12,1223.45,1223.8,1224.16,1224.54,1224.93,1225.34,1225.77,1226.21,1225.54,1227.91,1226.42,1228.96,1228.96,1229.21,1229.76,1230.34,1230.92,1231.53,1232.15,1232.78,1234.47,1225.26,1220.83,1214.69,1203.98,1187.26,1179.13,1151.98};


	vector<double> temp;
	temp.clear();
	if(chamber==31 && dist==1 && side==1) temp = HR_to_conector_RE31_G;
        if(chamber==31 && dist==1 && side==2) temp = HR_to_conector_RE31_R;
        if(chamber==31 && dist==2 && side==1) temp = LR_to_conector_RE31_G;
        if(chamber==31 && dist==2 && side==2) temp = LR_to_conector_RE31_R;
        if(chamber==31 && dist==3 && side==1) temp = Strip_length_RE31_G;
        if(chamber==31 && dist==3 && side==2) temp = Strip_length_RE31_R;
        if(chamber==41 && dist==1 && side==1) temp = HR_to_conector_RE41_G;
        if(chamber==41 && dist==1 && side==2) temp = HR_to_conector_RE41_R;
        if(chamber==41 && dist==2 && side==1) temp = LR_to_conector_RE41_G;
        if(chamber==41 && dist==2 && side==2) temp = LR_to_conector_RE41_R;
        if(chamber==41 && dist==3 && side==1) temp = Strip_length_RE41_G;
        if(chamber==41 && dist==3 && side==2) temp = Strip_length_RE41_R;

	return temp;
}

double strip_coordinates(int CH, int XY, int BT, int zeroone, int side, int strip){
//CH=31,41
//XY=0,1 => x,y
//BT=0,1 => B,T
//zeroone=0,1
//side=1,2 => G,R

	double temp = -999.;

        vector<double> XB0_RE31_G{0.75,6.74,12.73,18.72,24.71,30.71,36.7,42.69,48.68,54.68,60.67,66.66,72.65,78.65,84.64,90.63,96.62,102.62,108.61,114.6,120.59,126.59,132.58,138.57,144.56,150.56,156.55,162.54,168.53,174.53,180.52,186.51,192.5,198.5,204.49,210.48,216.47,222.47,228.46,234.45,241.02,247.9,254.82,261.8,268.82,275.9,283.02,290.2};
        vector<double> XB1_RE31_G{6.24,12.23,18.22,24.21,30.21,36.2,42.19,48.18,54.18,60.17,66.16,72.15,78.15,84.14,90.13,96.12,102.12,108.11,114.1,120.09,126.09,132.08,138.07,144.06,150.06,156.05,162.04,168.03,174.03,180.02,186.01,192,198,203.99,209.98,215.97,221.97,227.96,233.95,236.35,247.32,254.25,261.22,268.24,275.32,282.44,289.62,296.84};
  	vector<double> XT0_RE31_G{0.75,12.13,23.52,34.9,46.29,57.67,69.06,80.44,91.83,103.21,114.6,125.99,137.37,148.76,160.14,171.53,182.91,194.3,205.68,217.07,228.46,239.84,251.23,262.61,274,285.38,296.77,308.15,319.54,330.93,342.31,353.7,365.08,376.47,387.85,399.24,410.62,422.01,433.39,444.78,456.17,467.55,478.94,490.32,501.71,511.52,520.96,530.33};
  	vector<double> XT1_RE31_G{11.63,23.02,34.4,45.79,57.17,68.56,79.94,91.33,102.71,114.1,125.49,136.87,148.26,159.64,171.03,182.41,193.8,205.18,216.57,227.96,239.34,250.73,262.11,273.5,284.88,296.27,307.65,319.04,330.43,341.81,353.2,364.58,375.97,387.35,398.74,410.12,421.51,432.89,444.28,455.67,467.05,478.44,489.82,501.21,503.53,520.54,529.92,539.22 };
  	vector<double> YB0_RE31_G{1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1463.07,1457.3,1451.49,1445.63,1439.74,1433.8,1427.82,1421.79 };
  	vector<double> YB1_RE31_G{1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1457.78,1451.97,1446.12,1440.22,1434.29,1428.31,1422.29,1416.22};
  	vector<double> YT0_RE31_G{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.54,20.82,32.02};
  	vector<double> YT1_RE31_G{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20.32,31.53,42.65};
  	vector<double> XB0_RE31_R{0.75,6.74,12.73,18.72,24.71,30.71,36.7,42.69,48.68,54.68,60.67,66.66,72.65,78.65,84.64,90.63,96.62,102.62,108.61,114.6,120.59,126.59,132.58,138.57,144.56,150.56,156.55,162.54,168.53,174.53,180.52,186.51,192.5,198.5,204.49,210.48,216.47,222.47,228.46,234.45,241.02,247.9,254.82,261.8,268.82,275.9,283.02,290.2};
  	vector<double> XB1_RE31_R{6.24,12.23,18.22,24.21,30.21,36.2,42.19,48.18,54.18,60.17,66.16,72.15,78.15,84.14,90.13,96.12,102.12,108.11,114.1,120.09,126.09,132.08,138.07,144.06,150.06,156.05,162.04,168.03,174.03,180.02,186.01,192,198,203.99,209.98,215.97,221.97,227.96,233.95,236.35,247.32,254.25,261.22,268.24,275.32,282.44,289.62,296.84};
	vector<double> XT0_RE31_R{0.75,12.13,23.52,34.9,46.29,57.67,69.06,80.44,91.83,103.21,114.6,125.99,137.37,148.76,160.14,171.53,182.91,194.3,205.68,217.07,228.46,239.84,251.23,262.61,274,285.38,296.77,308.15,319.54,330.93,342.31,353.7,365.08,376.47,387.85,399.24,410.62,422.01,433.39,444.78,456.17,467.55,478.94,490.32,501.71,511.52,520.96,530.33};  
	vector<double> XT1_RE31_R{11.63,23.02,34.4,45.79,57.17,68.56,79.94,91.33,102.71,114.1,125.49,136.87,148.26,159.64,171.03,182.41,193.8,205.18,216.57,227.96,239.34,250.73,262.11,273.5,284.88,296.27,307.65,319.04,330.43,341.81,353.2,364.58,375.97,387.35,398.74,410.12,421.51,432.89,444.28,455.67,467.05,478.44,489.82,501.21,503.53,520.54,529.92,539.22};  
	vector<double> YB0_RE31_R{1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1463.07,1457.3,1451.49,1445.63,1439.74,1433.8,1427.82,1421.79};
  	vector<double> YB1_RE31_R{1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1467,1457.78,1451.97,1446.12,1440.22,1434.29,1428.31,1422.29,1416.22};
  	vector<double> YT0_RE31_R{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.54,20.82,32.02};
  	vector<double> YT1_RE31_R{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20.32,31.53,42.65};
        vector<double> XB0_RE41_G{0,7,14,21,28,35,42,49,55,62,69,76,83,90,97,104,111,118,125,131,138,145,152,159,166,173,180,187,194,200,207,214,221,228,235,242,249,256,263,270,276,284,292,300,308,316,324,333};  
	vector<double> XB1_RE41_G{7,14,20,27,34,41,48,55,62,69,76,83,90,96,103,110,117,124,131,138,145,152,159,165,172,179,186,193,200,207,214,221,228,235,241,248,255,262,269,276,279,291,299,307,316,324,332,340};  
	vector<double> XT0_RE41_G{0,12,23,34,46,57,69,80,91,103,114,125,137,148,160,171,182,194,205,217,228,239,251,262,274,285,296,308,319,330,342,353,365,376,387,399,410,422,433,444,456,467,478,490,501,511,520,530};  
	vector<double> XT1_RE41_G{11,23,34,45,57,68,79,91,102,114,125,136,148,159,171,182,193,205,216,227,239,250,262,273,284,296,307,319,330,341,353,364,375,387,398,410,421,432,444,455,467,478,489,501,503,520,529,539};  
	vector<double> YB0_RE41_G{1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1216,1209,1202,1195,1189,1182,1175};  
	vector<double> YB1_RE41_G{1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1209,1203,1196,1189,1182,1175,1168};  
	vector<double> YT0_RE41_G{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,21,32};
  	vector<double> YT1_RE41_G{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,32,43};
  	vector<double> XB0_RE41_R{0,7,14,21,28,35,42,49,55,62,69,76,83,90,97,104,111,118,125,131,138,145,152,159,166,173,180,187,194,200,207,214,221,228,235,242,249,256,263,270,276,284,292,300,308,316,324,333};  
	vector<double> XB1_RE41_R{7,14,20,27,34,41,48,55,62,69,76,83,90,96,103,110,117,124,131,138,145,152,159,165,172,179,186,193,200,207,214,221,228,235,241,248,255,262,269,276,279,291,299,307,316,324,332,340};
  	vector<double> XT0_RE41_R{0,12,23,34,46,57,69,80,91,103,114,125,137,148,160,171,182,194,205,217,228,239,251,262,274,285,296,308,319,330,342,353,365,376,387,399,410,422,433,444,456,467,478,490,501,511,520,530};
  	vector<double> XT1_RE41_R{11,23,34,45,57,68,79,91,102,114,125,136,148,159,171,182,193,205,216,227,239,250,262,273,284,296,307,319,330,341,353,364,375,387,398,410,421,432,444,455,467,478,489,501,503,520,529,539};
  	vector<double> YB0_RE41_R{1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1216,1209,1202,1195,1189,1182,1175};
  	vector<double> YB1_RE41_R{1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1220,1209,1203,1196,1189,1182,1175,1168};
  	vector<double> YT0_RE41_R{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,21,32};  
	vector<double> YT1_RE41_R{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,32,43};

	if(CH==31 && XY==0 && BT==0 && zeroone==0 && side==1) temp = XB0_RE31_G.at(strip);
        if(CH==31 && XY==0 && BT==0 && zeroone==1 && side==1) temp = XB1_RE31_G.at(strip);
        if(CH==31 && XY==0 && BT==1 && zeroone==0 && side==1) temp = XT0_RE31_G.at(strip);
        if(CH==31 && XY==0 && BT==1 && zeroone==1 && side==1) temp = XT1_RE31_G.at(strip);
        if(CH==31 && XY==1 && BT==0 && zeroone==0 && side==1) temp = YB0_RE31_G.at(strip);
        if(CH==31 && XY==1 && BT==0 && zeroone==1 && side==1) temp = YB1_RE31_G.at(strip);
        if(CH==31 && XY==1 && BT==1 && zeroone==0 && side==1) temp = YT0_RE31_G.at(strip);
        if(CH==31 && XY==1 && BT==1 && zeroone==1 && side==1) temp = YT1_RE31_G.at(strip);
        if(CH==31 && XY==0 && BT==0 && zeroone==0 && side==2) temp = XB0_RE31_R.at(strip);
        if(CH==31 && XY==0 && BT==0 && zeroone==1 && side==2) temp = XB1_RE31_R.at(strip);
        if(CH==31 && XY==0 && BT==1 && zeroone==0 && side==2) temp = XT0_RE31_R.at(strip);
        if(CH==31 && XY==0 && BT==1 && zeroone==1 && side==2) temp = XT1_RE31_R.at(strip);
        if(CH==31 && XY==1 && BT==0 && zeroone==0 && side==2) temp = YB0_RE31_R.at(strip);
        if(CH==31 && XY==1 && BT==0 && zeroone==1 && side==2) temp = YB1_RE31_R.at(strip);
        if(CH==31 && XY==1 && BT==1 && zeroone==0 && side==2) temp = YT0_RE31_R.at(strip);
        if(CH==31 && XY==1 && BT==1 && zeroone==1 && side==2) temp = YT1_RE31_R.at(strip);
        if(CH==41 && XY==0 && BT==0 && zeroone==0 && side==1) temp = XB0_RE41_G.at(strip);
        if(CH==41 && XY==0 && BT==0 && zeroone==1 && side==1) temp = XB1_RE41_G.at(strip);
        if(CH==41 && XY==0 && BT==1 && zeroone==0 && side==1) temp = XT0_RE41_G.at(strip);
        if(CH==41 && XY==0 && BT==1 && zeroone==1 && side==1) temp = XT1_RE41_G.at(strip);
        if(CH==41 && XY==1 && BT==0 && zeroone==0 && side==1) temp = YB0_RE41_G.at(strip);
        if(CH==41 && XY==1 && BT==0 && zeroone==1 && side==1) temp = YB1_RE41_G.at(strip);
        if(CH==41 && XY==1 && BT==1 && zeroone==0 && side==1) temp = YT0_RE41_G.at(strip);
        if(CH==41 && XY==1 && BT==1 && zeroone==1 && side==1) temp = YT1_RE41_G.at(strip);
        if(CH==41 && XY==0 && BT==0 && zeroone==0 && side==2) temp = XB0_RE41_R.at(strip);
        if(CH==41 && XY==0 && BT==0 && zeroone==1 && side==2) temp = XB1_RE41_R.at(strip);
        if(CH==41 && XY==0 && BT==1 && zeroone==0 && side==2) temp = XT0_RE41_R.at(strip);
        if(CH==41 && XY==0 && BT==1 && zeroone==1 && side==2) temp = XT1_RE41_R.at(strip);
        if(CH==41 && XY==1 && BT==0 && zeroone==0 && side==2) temp = YB0_RE41_R.at(strip);
        if(CH==41 && XY==1 && BT==0 && zeroone==1 && side==2) temp = YB1_RE41_R.at(strip);
        if(CH==41 && XY==1 && BT==1 && zeroone==0 && side==2) temp = YT0_RE41_R.at(strip);
        if(CH==41 && XY==1 && BT==1 && zeroone==1 && side==2) temp = YT1_RE41_R.at(strip);

	return temp;
}


vector<double> convert_DeltaTAndStrip_To_XY(int sn_, double strip_d, double deltaT){
        vector<int> Feb_Chamber_vec = Feb_Chamber(sn_);
        int chamber = Feb_Chamber_vec.at(1);
	int side = Feb_Chamber_vec.at(2);
	double strip_res = strip_d-(int)strip_d;
	int strip = (int)strip_d;

	if(strip_res>0.5) strip++;

	//strip_coordinates(int CH, int XY, int BT, int zeroone, int side){
	double X0B = strip_coordinates(chamber, 0, 0, 0, side, strip);
        double X1B = strip_coordinates(chamber, 0, 0, 1, side, strip);
        double X0T = strip_coordinates(chamber, 0, 1, 0, side, strip);
        double X1T = strip_coordinates(chamber, 0, 1, 1, side, strip);
        double Y0B = strip_coordinates(chamber, 1, 0, 0, side, strip);
        double Y1B = strip_coordinates(chamber, 1, 0, 1, side, strip);
        double Y0T = strip_coordinates(chamber, 1, 1, 0, side, strip);
        double Y1T = strip_coordinates(chamber, 1, 1, 1, side, strip);

	double XB = X0B+(X1B-X0B)/2;
        double XT = X0T+(X1T-X0T)/2;
        double YB = Y0B+(Y1B-Y0B)/2;
        double YT = Y0T+(Y1T-Y0T)/2;

	if(strip_res<=0.5){
		XB=XB+((X1B-XB)/(0.5))*strip_res;
        	XT=XT+((X1T-XT)/(0.5))*strip_res;
	}
	if(strip_res>0.5){
                XB=XB-((XB-X0B)/(0.5))*(1.-strip_res);
                XT=XT-((XT-X0T)/(0.5))*(1.-strip_res);
	}

        vector<double> Strip_length_vec = Aligment_factor(sn_,3);
	double L = Strip_length_vec.at(strip);
	double l_ = 0.5*(V_conector*deltaT) + L/2;

	double X = l_*((XB-XT)/L)+XT;//l_*((XT-XB)/L)+XB;
        double Y = l_*((YB-YT)/L)+YT;//l_*((YT-YB)/L)+YB;

	vector<double> temp;
	temp.clear();
	temp.push_back(X);
        temp.push_back(Y);

	return temp;
}


#endif
